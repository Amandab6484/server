CREATE TABLE t1 (a int, b int, c int, KEY a_b (a,b), KEY a_c (a,c));

insert into t1 values (0,1,0), (0,2,0), (0,3,0), (0,4,0), (0,5,0), (0,6,0);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,1), (1,11,1), (1,12,1);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);

--echo #
--echo # index a_b should be used, no need for filesort
--echo #

let $query= select a,b,c from t1 where a=1 and c=2 order by b limit 5;
set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval explain $query;

set optimizer_switch='cost_based_order_by_limit=on';
eval explain $query;
drop table t1;

--echo #
--echo # Tests where Index(scan, ref or range access) satisfies the ORDERING
--echo #

CREATE TABLE t1 (a int, b int, c int, KEY a_b (a,b), KEY a_c (a,c));

insert into t1 values (0,1,0), (0,2,0), (0,3,0), (0,4,0), (0,5,0), (0,6,0);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,1), (1,11,1), (1,12,1);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,1,2);

--echo # index key a_b, no need for filesort

let $query= select a,b,c from t1 where a=1 and c=2 order by b limit 10;
set optimizer_trace=1;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval explain $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval explain $query;

drop table t1;

CREATE TABLE t1(
   a int NOT NULL,
   b char NULL,
   PRIMARY KEY(a)
);

INSERT INTO t1 VALUES (1,'a'), (2,'b'), (3,'c'), (4,'d');

--echo #
--echo # Should use index condition
--echo #

let $query= SELECT * FROM t1 WHERE a BETWEEN 1 and 2 ORDER BY a LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=on';
eval EXPLAIN $query;

--echo #
--echo # Should not use index condition as ORDER by DESC is used
--echo #

let $query= SELECT * FROM t1 WHERE a BETWEEN 1 and 2 ORDER BY a DESC LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval EXPLAIN $query;
eval $query;

set optimizer_switch='cost_based_order_by_limit=on';
eval EXPLAIN $query;

drop table t1;

create table t1(a int, b int, c int, key(a), key a_b(a,b)); # 10 rows
insert into t1 values (0,1,0), (0,2,0), (0,3,0);
insert into t1 values (1,6,1), (1,7,1), (1,5,1);
insert into t1 values (2,8,2), (2,9,3), (2,10,4);
insert into t1 values (3,1,5);

create table t2(a int, b int, c int, key(b), key(c)); # 10 rows
insert into t2 select a, b, c from t1;

--echo #
--echo # Testing using of Indexes on first non-const table
--echo #

--echo #
--echo #  Using range scan
--echo #

let $query=
SELECT * FROM t1,t2
WHERE
  t1.a=2 AND t2.b > 8 AND
  t1.b=t2.b
ORDER BY t1.b LIMIT 10;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=on';
eval EXPLAIN $query;

--echo #
--echo #  Using ref access
--echo #
let $query=
SELECT * FROM t1,t2
WHERE
  t1.a=2 AND t2.c >= 1 AND
  t1.b=t2.b
ORDER BY t1.b LIMIT 10;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=on';
eval EXPLAIN $query;

drop table t1,t2;

--echo # TESTS with INDEX HINTS

set optimizer_switch='cost_based_order_by_limit=on';
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int,c int, key idx1(a), key idx2(a,b), key idx3(c));
insert into t1 select a,a,a from t0 where a <5; # 5 rows

--disable_result_log
analyze table t1 persistent for all;
--enable_result_log

--echo #
--echo # Index idx1 to be used for index scan
--echo #

let $query= SELECT * from t1 where b > 0 order by t1.a limit 2;
set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

--echo #
--echo # Index idx2 to be used for index scan(USE INDEX is used)
--echo #

let $query= SELECT * from t1 USE INDEX(idx2) WHERE b > 0 ORDER BY t1.a LIMIT 2;
set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

--echo #
--echo # Index idx2 to be used for index scan(USE INDEX for ORDER BY  is used)
--echo #

let $query=
SELECT * from t1 USE INDEX FOR ORDER BY(idx2)
WHERE b > 0
ORDER BY t1.a LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

--echo #
--echo # Use Filesort as idx3 does not resolve ORDER BY clause
--echo #

let $query=
SELECT * from t1 USE INDEX FOR ORDER BY(idx3)
WHERE b > 0
ORDER BY t1.a LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

--echo #
--echo # Using index idx2 as idx1 is ignored
--echo #

let $query=
SELECT * from t1 IGNORE INDEX(idx1)
WHERE b > 0
ORDER BY t1.a LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

--echo #
--echo # Use index idx2 for sorting, it is forced here
--echo #

let $query=
SELECT * from t1 FORCE INDEX(idx2)
WHERE b > 0
ORDER BY t1.a LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

--echo #
--echo # Use FILESORT as idx3 cannot resolve ORDER BY clause
--echo #

let $query=
SELECT * from t1 FORCE INDEX FOR ORDER BY(idx3)
WHERE b > 0
ORDER BY t1.a LIMIT 2;

set optimizer_switch='cost_based_order_by_limit=on';
eval $query;
eval EXPLAIN $query;

set optimizer_switch='cost_based_order_by_limit=off';
eval EXPLAIN $query;

drop table t0,t1;

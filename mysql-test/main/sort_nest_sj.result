#
# SORT-NEST WITH SEMI JOINS
#

# MERGED SEMI-JOINS

# SEMI JOIN MATERIALIZATION SCAN with SORT-NEST
CREATE TABLE t0(a int);
CREATE TABLE t1 (a int, b int, c int);
CREATE TABLE t2 (a int, b int, c int);
CREATE TABLE t3 (a int, b int, c int, key(a));
CREATE TABLE t4 (a int, b int, c int, key(a));
INSERT INTO t0 SELECT seq-1 FROM seq_1_to_10;
INSERT INTO t1 SELECT seq-1, seq-1, seq-1 FROM seq_1_to_100;
INSERT INTO t2 SELECT a,a,a FROM t0;
INSERT INTO t3 SELECT a,a,a FROM t0;
INSERT INTO t4 SELECT a,a,a FROM t0;
ANALYZE TABLE t0 PERSISTENT FOR ALL;
ANALYZE TABLE t1 PERSISTENT FOR ALL;
ANALYZE TABLE t2 PERSISTENT FOR ALL;
ANALYZE TABLE t3 PERSISTENT FOR ALL;
ANALYZE TABLE t4 PERSISTENT FOR ALL;
# SJM scan inside the sort-nest
# sort-nest includes (t2, <subquery2>)
set use_sort_nest=1;
EXPLAIN SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t1.b DESC ,t2.b DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	10	
1	PRIMARY	<subquery2>	ALL	distinct_key	NULL	NULL	NULL	3	
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	100	Using where
2	MATERIALIZED	t4	range	a	a	5	NULL	3	Using where; Using index
2	MATERIALIZED	t3	ref	a	a	5	test.t4.a	1	
EXPLAIN FORMAT=JSON SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t1.b DESC ,t2.b DESC
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100
    },
    "table": {
      "table_name": "<subquery2>",
      "access_type": "ALL",
      "possible_keys": ["distinct_key"],
      "rows": 3,
      "filtered": 100,
      "materialized": {
        "unique": 1,
        "query_block": {
          "select_id": 2,
          "table": {
            "table_name": "t4",
            "access_type": "range",
            "possible_keys": ["a"],
            "key": "a",
            "key_length": "5",
            "used_key_parts": ["a"],
            "rows": 3,
            "filtered": 100,
            "attached_condition": "t4.a < 3 and t4.a is not null",
            "using_index": true
          },
          "table": {
            "table_name": "t3",
            "access_type": "ref",
            "possible_keys": ["a"],
            "key": "a",
            "key_length": "5",
            "used_key_parts": ["a"],
            "ref": ["test.t4.a"],
            "rows": 1,
            "filtered": 100
          }
        }
      }
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b desc, `sort-nest`.b desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100,
      "attached_condition": "t1.a = `sort-nest`.a and t1.b = `sort-nest`.b"
    }
  }
}
SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t1.b DESC ,t2.b DESC
LIMIT 5;
a	a	b	b
2	2	2	2
1	1	1	1
0	0	0	0
set use_sort_nest=0;
SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t1.b DESC ,t2.b DESC
LIMIT 5;
a	a	b	b
2	2	2	2
1	1	1	1
0	0	0	0
#
# SJM scan table is the first table inside the sort-nest
#
alter table t2 add key(b);
set use_sort_nest=1;
EXPLAIN SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND t2.b < 5 AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t2.b DESC, t1.b DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<subquery2>	ALL	distinct_key	NULL	NULL	NULL	3	
1	PRIMARY	t2	ALL	b	NULL	NULL	NULL	10	Using where; Using join buffer (flat, BNL join)
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	100	Using where
2	MATERIALIZED	t4	range	a	a	5	NULL	3	Using where; Using index
2	MATERIALIZED	t3	ref	a	a	5	test.t4.a	1	
SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND t2.b < 5 AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t2.b DESC, t1.b DESC
LIMIT 5;
a	a	b	b
2	2	2	2
1	1	1	1
0	0	0	0
set use_sort_nest= 0;
SELECT t1.a, t2.a, t1.b,t2.b
FROM t1, t2
WHERE t1.a=t2.a AND t2.b < 5 AND
t1.b IN (SELECT t3.b FROM t3,t4
WHERE t3.a < 3 AND t3.a=t4.a)
ORDER BY t2.b DESC, t1.b DESC
LIMIT 5;
a	a	b	b
2	2	2	2
1	1	1	1
0	0	0	0
DROP TABLE t0, t1, t2, t3, t4;
#
# SJM Lookup with sort-nest, where SJM lookup table is outside the
# sort-nest
#
create table t1 (a int, b int, c int, key(a));
create table t2 (a int, b int, c int, key(c));
create table t3 (a int, b int, c int, key(a));
create table t4 (a int, b int, c int);
INSERT INTO t1 SELECT seq-1, seq-1, seq-1 FROM seq_1_to_10;
INSERT INTO t2 SELECT seq-1, seq-1, seq-1 FROM seq_1_to_100;
INSERT INTO t3 SELECT seq-1, seq-1, seq-1 FROM seq_1_to_1000;
INSERT INTO t4 SELECT seq-1, seq-1, seq-1 FROM seq_1_to_100;
ANALYZE TABLE t1 PERSISTENT FOR ALL;
ANALYZE TABLE t2 PERSISTENT FOR ALL;
ANALYZE TABLE t3 PERSISTENT FOR ALL;
ANALYZE TABLE t4 PERSISTENT FOR ALL;
set use_sort_nest= 1;
EXPLAIN SELECT t1.a, t2.a, t2.b
FROM t1, t2
WHERE t2.a in (SELECT t3.b from t3)
AND t1.a= t2.b
AND t1.a < 5
ORDER BY t1.b DESC, t2.a DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t1	ALL	a	NULL	NULL	NULL	10	Using where
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	100	Using where; Using join buffer (flat, BNL join)
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	5	Using filesort
1	PRIMARY	<subquery2>	eq_ref	distinct_key	distinct_key	4	func	1	
2	MATERIALIZED	t3	ALL	NULL	NULL	NULL	NULL	1000	
EXPLAIN FORMAT=JSON SELECT t1.a, t2.a, t2.b
FROM t1, t2
WHERE t2.a in (SELECT t3.b from t3)
AND t1.a= t2.b
AND t1.a < 5
ORDER BY t1.b DESC, t2.a DESC
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "possible_keys": ["a"],
      "rows": 10,
      "filtered": 50,
      "attached_condition": "t1.a < 5"
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 100,
        "filtered": 5.4688
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL",
      "attached_condition": "t2.b = t1.a"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 5,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "<subquery2>",
      "access_type": "eq_ref",
      "possible_keys": ["distinct_key"],
      "key": "distinct_key",
      "key_length": "4",
      "used_key_parts": ["b"],
      "ref": ["func"],
      "rows": 1,
      "filtered": 100,
      "materialized": {
        "unique": 1,
        "query_block": {
          "select_id": 2,
          "table": {
            "table_name": "t3",
            "access_type": "ALL",
            "rows": 1000,
            "filtered": 100
          }
        }
      }
    }
  }
}
SELECT t1.a, t2.a, t2.b
FROM t1, t2
WHERE t2.a in (SELECT t3.b from t3)
AND t1.a= t2.b
AND t1.a < 5
ORDER BY t1.b DESC, t2.a DESC
LIMIT 5;
a	a	b
4	4	4
3	3	3
2	2	2
1	1	1
0	0	0
set use_sort_nest= 0;
SELECT t1.a, t2.a, t2.b
FROM t1, t2
WHERE t2.a in (SELECT t3.b from t3)
AND t1.a= t2.b
AND t1.a < 5
ORDER BY t1.b DESC, t2.a DESC
LIMIT 5;
a	a	b
4	4	4
3	3	3
2	2	2
1	1	1
0	0	0
DROP TABLE t1, t2, t3, t4;
#
# Firstmatch strategy
#
set @save_optimizer_switch=@@optimizer_switch;
create table t0(a int);
insert t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int, c int, key(a));
insert t1 SELECT a,a,a from t0;
create table t2 as SELECT * from t1;
create table t3 as SELECT * from t1;
set use_sort_nest=1;
EXPLAIN SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	10	Using where
1	PRIMARY	t1	ref	a	a	5	test.t2.a	1	
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	5	Using filesort
1	PRIMARY	t3	ALL	NULL	NULL	NULL	NULL	10	Using where; FirstMatch(<sort-nest>)
EXPLAIN FORMAT=JSON SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100,
      "attached_condition": "t2.a is not null"
    },
    "table": {
      "table_name": "t1",
      "access_type": "ref",
      "possible_keys": ["a"],
      "key": "a",
      "key_length": "5",
      "used_key_parts": ["a"],
      "ref": ["test.t2.a"],
      "rows": 1,
      "filtered": 100
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.c desc, `sort-nest`.c desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 5,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100,
      "attached_condition": "t3.b = `sort-nest`.b and t3.c <= `sort-nest`.c",
      "first_match": "<sort-nest>"
    }
  }
}
SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
a	b	c	a	b	c
9	9	9	9	9	9
8	8	8	8	8	8
7	7	7	7	7	7
6	6	6	6	6	6
5	5	5	5	5	5
set use_sort_nest=0;
SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
a	b	c	a	b	c
9	9	9	9	9	9
8	8	8	8	8	8
7	7	7	7	7	7
6	6	6	6	6	6
5	5	5	5	5	5
set optimizer_switch='firstmatch=off';
#
# Duplicate Weedout strategy
#
set use_sort_nest=1;
EXPLAIN SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	10	Using where
1	PRIMARY	t1	ref	a	a	5	test.t2.a	1	
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	5	Using filesort
1	PRIMARY	t3	ALL	NULL	NULL	NULL	NULL	10	Using where; Start temporary; End temporary
EXPLAIN FORMAT=JSON SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100,
      "attached_condition": "t2.a is not null"
    },
    "table": {
      "table_name": "t1",
      "access_type": "ref",
      "possible_keys": ["a"],
      "key": "a",
      "key_length": "5",
      "used_key_parts": ["a"],
      "ref": ["test.t2.a"],
      "rows": 1,
      "filtered": 100
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.c desc, `sort-nest`.c desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 5,
          "filtered": 100
        }
      }
    },
    "duplicates_removal": {
      "table": {
        "table_name": "t3",
        "access_type": "ALL",
        "rows": 10,
        "filtered": 100,
        "attached_condition": "t3.b = `sort-nest`.b and t3.c <= `sort-nest`.c"
      }
    }
  }
}
SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
a	b	c	a	b	c
9	9	9	9	9	9
8	8	8	8	8	8
7	7	7	7	7	7
6	6	6	6	6	6
5	5	5	5	5	5
set use_sort_nest=0;
SELECT * FROM t1, t2
WHERE t1.a=t2.a AND
t1.b IN (SELECT b FROM t3 WHERE t3.c<=t2.c)
ORDER BY t2.c DESC, t1.c DESC
LIMIT 5;
a	b	c	a	b	c
9	9	9	9	9	9
8	8	8	8	8	8
7	7	7	7	7	7
6	6	6	6	6	6
5	5	5	5	5	5
set optimizer_switch=@save_optimizer_switch;
DROP TABLE t0,t1,t2,t3;

# NON-MERGED SEMI JOINS

create table t0 (a int);
INSERT INTO t0 SELECT seq-1 FROM seq_1_to_10;
create table t1 (a int, b int);
insert into t1 SELECT a,a from t0 where a <5;
create table t2 as SELECT * from t1 where a < 5;
create table t3(a int, b int);
INSERT INTO t3 SELECT seq-1, seq-1 FROM seq_1_to_100;
<subquery2> outside the sort-nest
set use_sort_nest=1;
EXPLAIN SELECT * from t2,t1
WHERE t2.b=t1.b
AND
t1.a IN (SELECT max(t3.a) FROM t3 GROUP BY t3.b)
ORDER BY t2.a DESC,t1.a DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	5	
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	5	Using where; Using join buffer (flat, BNL join)
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	5	Using filesort
1	PRIMARY	<subquery2>	eq_ref	distinct_key	distinct_key	4	sort-nest.a	1	
2	MATERIALIZED	t3	ALL	NULL	NULL	NULL	NULL	100	Using temporary
EXPLAIN FORMAT=JSON SELECT * from t2,t1
WHERE t2.b=t1.b
AND
t1.a IN (SELECT max(t3.a) FROM t3 GROUP BY t3.b)
ORDER BY t2.a DESC,t1.a DESC
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 5,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t1",
        "access_type": "ALL",
        "rows": 5,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL",
      "attached_condition": "t1.b = t2.b"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.a desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 5,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "<subquery2>",
      "access_type": "eq_ref",
      "possible_keys": ["distinct_key"],
      "key": "distinct_key",
      "key_length": "4",
      "used_key_parts": ["max(t3.a)"],
      "ref": ["sort-nest.a"],
      "rows": 1,
      "filtered": 100,
      "materialized": {
        "unique": 1,
        "query_block": {
          "select_id": 2,
          "temporary_table": {
            "table": {
              "table_name": "t3",
              "access_type": "ALL",
              "rows": 100,
              "filtered": 100
            }
          }
        }
      }
    }
  }
}
SELECT * from t2,t1
WHERE t2.b=t1.b
AND
t1.a IN (SELECT max(t3.a) FROM t3 GROUP BY t3.b)
ORDER BY t2.a DESC,t1.a DESC
LIMIT 5;
a	b	a	b
4	4	4	4
3	3	3	3
2	2	2	2
1	1	1	1
0	0	0	0
set use_sort_nest=0;
SELECT * from t2,t1
WHERE t2.b=t1.b
AND
t1.a IN (SELECT max(t3.a) FROM t3 GROUP BY t3.b)
ORDER BY t2.a DESC,t1.a DESC
LIMIT 5;
a	b	a	b
4	4	4	4
3	3	3	3
2	2	2	2
1	1	1	1
0	0	0	0
<subquery2> inside the sort-nest
set use_sort_nest=1;
EXPLAIN SELECT * FROM t3,t2
WHERE t3.b=t2.b AND
t3.a IN (SELECT max(t1.a) FROM t1 GROUP BY t1.b)
ORDER BY t3.a DESC,t2.a DESC
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	5	
1	PRIMARY	<subquery2>	ALL	distinct_key	NULL	NULL	NULL	5	Using join buffer (flat, BNL join)
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	PRIMARY	t3	ALL	NULL	NULL	NULL	NULL	100	Using where
2	MATERIALIZED	t1	ALL	NULL	NULL	NULL	NULL	5	Using temporary
EXPLAIN FORMAT=JSON SELECT * FROM t3,t2
WHERE t3.b=t2.b AND
t3.a IN (SELECT max(t1.a) FROM t1 GROUP BY t1.b)
ORDER BY t3.a DESC,t2.a DESC
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 5,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "<subquery2>",
        "access_type": "ALL",
        "possible_keys": ["distinct_key"],
        "rows": 5,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL",
      "materialized": {
        "unique": 1,
        "query_block": {
          "select_id": 2,
          "temporary_table": {
            "table": {
              "table_name": "t1",
              "access_type": "ALL",
              "rows": 5,
              "filtered": 100
            }
          }
        }
      }
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.`max(t1.a)` desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100,
      "attached_condition": "t3.a = `sort-nest`.`max(t1.a)` and t3.b = `sort-nest`.b"
    }
  }
}
SELECT * FROM t3,t2
WHERE t3.b=t2.b AND
t3.a IN (SELECT max(t1.a) FROM t1 GROUP BY t1.b)
ORDER BY t3.a DESC,t2.a DESC
LIMIT 5;
a	b	a	b
4	4	4	4
3	3	3	3
2	2	2	2
1	1	1	1
0	0	0	0
set use_sort_nest=0;
SELECT * FROM t3,t2
WHERE t3.b=t2.b AND
t3.a IN (SELECT max(t1.a) FROM t1 GROUP BY t1.b)
ORDER BY t3.a DESC,t2.a DESC
LIMIT 5;
a	b	a	b
4	4	4	4
3	3	3	3
2	2	2	2
1	1	1	1
0	0	0	0
DROP TABLE t1,t2,t3,t0;
